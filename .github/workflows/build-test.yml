name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Set permissions explicitly for security best practices
permissions:
  contents: read  # For checking out code
  packages: read  # For pulling container images
  # Note: For PR builds, we don't need write permissions

jobs:
  build:
    name: Build and Test Containers
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Create certificate file for build
        run: |
          mkdir -p certs/org
          # Start with an empty file
          touch certs/org/ca-bundle.pem
          
          # First try using single secret
          if [ -n "${{ secrets.CA_BUNDLE }}" ]; then
            echo "${{ secrets.CA_BUNDLE }}" > certs/org/ca-bundle.pem
            echo "Using CA certificate from single secret"
          # Next try using split certificate parts
          elif [ -n "${{ secrets.CA_BUNDLE_PART1 }}" ]; then
            # Add part 1
            echo "${{ secrets.CA_BUNDLE_PART1 }}" > certs/org/ca-bundle.pem
            echo "Adding certificate part 1"
            
            # Check for and add additional parts
            if [ -n "${{ secrets.CA_BUNDLE_PART2 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART2 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 2"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART3 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART3 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 3"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART4 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART4 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 4"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART5 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART5 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 5"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART6 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART6 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 6"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART7 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART7 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 7"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART8 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART8 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 8"
            fi
            
            if [ -n "${{ secrets.CA_BUNDLE_PART9 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART9 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 9"
            fi
            
            echo "Using CA certificate assembled from multiple parts"
          else
            # Fallback to empty file
            echo "Using empty CA certificate file"
          fi

      - name: Prepare Dockerfiles
        run: |
          # Instead of relying on symlinks, directly reference the actual files
          echo "Using Dockerfile for full build"
          echo "Using Dockerfile.optimized for minimal build"
      
      - name: Build minimal container
        uses: docker/build-push-action@v4
        with:
          context: .
          # Directly use the actual Dockerfile.optimized instead of a symlink
          file: ./Dockerfile.optimized
          push: false
          tags: cac-builder:minimal-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
      
      - name: Test minimal container
        run: |
          docker run --rm cac-builder:minimal-test -c "mkdir -p /content/build && cd /content/build && cmake .. && echo 'Build environment test: SUCCESS'"
      
      - name: Build full container
        uses: docker/build-push-action@v4
        with:
          context: .
          # Directly use the actual Dockerfile instead of a symlink
          file: ./Dockerfile
          push: false
          tags: cac-builder:full-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TYPE=full
          load: true
      
      - name: Test full container
        run: |
          mkdir -p output
          docker run -v ${{ github.workspace }}/output:/output --rm cac-builder:full-test -c "ls /content/build/ssg-* && cp /content/build/ssg-rhel* /output/ 2>/dev/null || echo 'No content found, checking build environment'"
          
      - name: Verify output files (full build only)
        run: |
          ls -la output/ || echo "No output files found - this is expected in PR builds"
