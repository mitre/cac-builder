name: Publish Container Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

# Set explicit permissions - only grant what's needed
permissions:
  contents: read     # Needed to check out the repository
  packages: write    # Needed to push to GitHub Container Registry
  # The following permissions are NOT needed and should remain at default (none):
  # - issues
  # - pull-requests
  # - actions
  # - security-events
  # - id-token
  # - deployments

jobs:
  push-to-registry:
    name: Push containers to GitHub Container Registry
    runs-on: ubuntu-latest
    # Job-level permissions are already set at workflow level
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Create certificate file for build
        run: |
          mkdir -p certs/org
          
          # Start with an empty file
          touch certs/org/ca-bundle.pem
          
          # First try using single secret
          if [ -n "${{ secrets.CA_BUNDLE }}" ]; then
            # Use the single bundle secret
            echo "${{ secrets.CA_BUNDLE }}" > certs/org/ca-bundle.pem
            echo "Using CA certificate from single secret"
          # Next try using split certificate parts
          elif [ -n "${{ secrets.CA_BUNDLE_PART1 }}" ]; then
            # For split certificates, start with part 1
            echo "${{ secrets.CA_BUNDLE_PART1 }}" > certs/org/ca-bundle.pem
            echo "Adding certificate part 1"
            
            # Then append each additional part that exists
            # Part 2
            if [ -n "${{ secrets.CA_BUNDLE_PART2 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART2 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 2"
            fi
            
            # Part 3
            if [ -n "${{ secrets.CA_BUNDLE_PART3 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART3 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 3"
            fi
            
            # Part 4
            if [ -n "${{ secrets.CA_BUNDLE_PART4 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART4 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 4"
            fi
            
            # Part 5
            if [ -n "${{ secrets.CA_BUNDLE_PART5 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART5 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 5"
            fi
            
            # Part 6
            if [ -n "${{ secrets.CA_BUNDLE_PART6 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART6 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 6"
            fi
            
            # Part 7
            if [ -n "${{ secrets.CA_BUNDLE_PART7 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART7 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 7"
            fi
            
            # Part 8
            if [ -n "${{ secrets.CA_BUNDLE_PART8 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART8 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 8"
            fi
            
            # Part 9
            if [ -n "${{ secrets.CA_BUNDLE_PART9 }}" ]; then
              echo "${{ secrets.CA_BUNDLE_PART9 }}" >> certs/org/ca-bundle.pem
              echo "Adding certificate part 9"
            fi
            
            echo "Using CA certificate assembled from multiple parts"
          else
            # Fallback to empty file
            echo "Using empty CA certificate file"
          fi
      
      - name: Prepare Dockerfiles
        run: |
          # Instead of relying on symlinks, directly reference the actual files
          echo "Using Dockerfile for full build"
          echo "Using Dockerfile.optimized for minimal build"
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
      
      - name: Build and push minimal container
        uses: docker/build-push-action@v4
        with:
          context: .
          # Directly use the actual Dockerfile.optimized instead of a symlink
          file: ./Dockerfile.optimized
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:minimal
            ${{ steps.meta.outputs.tags }}-minimal
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push full container
        uses: docker/build-push-action@v4
        with:
          context: .
          # Directly use the actual Dockerfile instead of a symlink
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:full
            ${{ steps.meta.outputs.tags }}-full
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_TYPE=full
          cache-from: type=gha
          cache-to: type=gha,mode=max
